<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <link rel="stylesheet" href="https://unpkg.com/tachyons@4.7.0/css/tachyons.min.css" />
  <title>ngx-hoc</title>
  <style>
    .github-corner {
      position: fixed;
      top: 0;
      right: 0;
    }

    .github-corner:hover .octo-arm {
      animation: octocat-wave 560ms ease-in-out
    }

    @keyframes octocat-wave {
      0%,
      100% {
        transform: rotate(0)
      }
      20%,
      60% {
        transform: rotate(-25deg)
      }
      40%,
      80% {
        transform: rotate(10deg)
      }
    }

    @media (max-width:500px) {
      .github-corner {
        display: none;
      }
      .github-corner:hover .octo-arm {
        animation: none
      }
      .github-corner .octo-arm {
        animation: octocat-wave 560ms ease-in-out
      }
    }

    pre, code {
      overflow-x: scroll;
    }
  </style>
</head>

<body class="avenir">
<!--<body class="avenir ba bw3 b--green">-->

  <a href="https://github.com/phillipcurl/ngx-hoc" class="github-corner hidden-xs" aria-label="View source on Github">
    <svg width="80" height="80" viewBox="0 0 250 250" style="fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;"
      aria-hidden="true">
      <path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path>
      <path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"
        fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path>
      <path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"
        fill="currentColor" class="octo-body"></path>
    </svg>
  </a>

  <header class="pa3 pa4-ns">
    <a class="link dim black b f1 f-headline-ns tc db mb4 mb4-ns" title="Home" href="#">ngx-hoc</a>
    <nav class="tc pb3">
      <a class="link dim black f6 f5-ns dib mr3" title="Demo" href="javascript:;">Demo</a>
      <a class="link dim black f6 f5-ns dib mr3" title="Installation" href="https://github.com/phillipcurl/ngx-hoc#installation">Installation</a>
      <a class="link dim black f6 f5-ns dib mr3" title="Documentation" href="https://phillipcurl.github.io/ngx-hoc/docs/">Documentation</a>
    </nav>
  </header>

  <!--Problem
  Solution
  Installation
  Usage
  Inspiration
  Related
  Thanks
  License-->

  <main class="ph2 ph3-m ph4-l">
    <section class="cf mw6 mw7-ns center pv3 mb4">
      <header class="fl w-100">
        <h2 class="lh-title ttu f3 b mt0">
          Installation & Setup
        </h2>
        <hr class="bb bw1 b--black-10">
      </header>
      <article class="cf fl w-100">
        <p class="f6 f4-ns lh-copy measure">
          Install ngx-hoc via Yarn.
        </p>
        <pre class="bg-light-gray pa3 bl bw3 b--green"><code>yarn add ngx-hoc</code></pre>
      </article>
      <article class="cf fl w-100">
        <p class="f6 f4-ns lh-copy measure">
          If you don't use Yarn, install and save ngx-hoc to your package.json.
        </p>
        <pre class="bg-light-gray pa3 bl bw3 b--green"><code>npm i ngx-hoc --save</code></pre>
      </article>
      <article class="cf fl w-100">
        <p class="f6 f4-ns lh-copy measure">
          Import the HocModule into your AppModule. ngx-hoc ships with some default options, 
          so we'll just use the standard import for now, but read on to see how to configure ngx-hoc globally.
        </p>
        <pre class="bg-light-gray pa3 bl bw3 b--green">
<code>import { NgModule } from '@angular/core';
import { HocModule } from 'ngx-hoc';

@NgModule({
  imports: [
    ...,
    HocModule,
    ...
  ]
})
export class AppModule {}</code></pre>
      </article>
    </section>
    <section class="cf mw6 mw7-ns center pv3 mb4">
      <header class="fl w-100">
        <h2 class="lh-title ttu f3 b mt0">
          Usage
        </h2>
        <hr class="bb bw1 b--black-10">
      </header>
      <article class="cf fl w-100">
        <p class="f6 f4-ns lh-copy measure">
          Install ngx-hoc via Yarn.
        </p>
        <pre class="bg-light-gray pa3 bl bw3 b--green"><code>yarn add ngx-hoc</code></pre>
      </article>
      <article class="cf fl w-100">
        <p class="f6 f4-ns lh-copy measure">
          If you don't use Yarn, install and save ngx-hoc to your package.json.
        </p>
        <pre class="bg-light-gray pa3 bl bw3 b--green"><code>npm i ngx-hoc --save</code></pre>
      </article>
      <article class="cf fl w-100">
        <p class="f6 f4-ns lh-copy measure">
          Import the HocModule into your AppModule. ngx-hoc ships with some default options, 
          so we'll just use the standard import for now, but read on to see how to configure ngx-hoc globally.
        </p>
        <pre class="bg-light-gray pa3 bl bw3 b--green">
<code>import { Component, NgModule } from '@angular/core';
import { HocModule } from 'ngx-hoc';

@NgModule({
  imports: [
    ...,
    HocModule,
    ...
  ]
})
export class AppModule {}</code></pre>
      </article>
    </section>
    <section class="cf mw6 mw7-ns center pv3 mb4">
      <header class="fl w-100">
        <h2 class="lh-title ttu f3 b mt0">
          Configuration
        </h2>
        <hr class="bb bw1 b--black-10">
      </header>
      <article class="cf fl w-100">
        <p class="f6 f4-ns lh-copy measure">
          Import the HocModule into your AppModule. ngx-hoc ships with some default options, 
          so we'll just use the standard import for now, but read on to see how to configure ngx-hoc globally.
          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum nostrum dignissimos debitis officia 
          suscipit ipsam, eum consectetur sed sit nesciunt! Soluta repellat cupiditate placeat optio similique 
          officiis, veritatis, ad perferendis.
        </p>
        <dl class="lh-title mv2">
          <dt class="dib b">W:</dt>
          <dd class="dib ml0 gray">Wins</dd>
        </dl>
        <dl class="lh-title mv2">
          <dt class="dib b">L:</dt>
          <dd class="dib ml0 gray">Losses</dd>
        </dl>
        <dl class="lh-title mv2">
          <dt class="dib b">PCT:</dt>
          <dd class="dib ml0 gray">Winning Percentages</dd>
        </dl>
        <dl class="lh-title mv2">
          <dt class="dib b">GB:</dt>
          <dd class="dib ml0 gray">Games Back</dd>
        </dl>
        <dl class="lh-title mv2">
          <dt class="dib b">Home:</dt>
          <dd class="dib ml0 gray">Home Record</dd>
        </dl>
        <dl class="lh-title mv2">
          <dt class="dib b">Road:</dt>
          <dd class="dib ml0 gray">Road Record</dd>
        </dl>
        <dl class="lh-title mv2">
          <dt class="dib b">Div:</dt>
          <dd class="dib ml0 gray">Division Record</dd>
        </dl>
        <pre class="bg-light-gray pa3 bl bw3 b--green">
<code>import { HocModule, HocConfig } from 'ngx-warehouse';

const HOC_CONFIG: HocConfig = {
  showLoading: true //default is false
};

@NgModule({
  ...
  imports: [
    ...
    HocModule.configureHOC(HOC_CONFIG),
    ...
  ],
  ...
})</code></pre>
      </article>
    </section>
    <section class="cf mw6 mw7-ns center pv3">
      <header class="fl w-100">
        <h2 class="lh-title ttu f3 b mt0">
          Example
        </h2>
        <hr class="bb bw1 b--black-10">
      </header>
      <div class="cf fl w-100">
        <p class="f6 f4-ns lh-copy measure">
          Import the HocModule into your AppModule. ngx-hoc ships with some default options, 
          so we'll just use the standard import for now, but read on to see how to configure ngx-hoc globally.
          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum nostrum dignissimos debitis officia 
          suscipit ipsam, eum consectetur sed sit nesciunt! Soluta repellat cupiditate placeat optio similique 
          officiis, veritatis, ad perferendis.
        </p>
      </div>
    </section>
    <article class="cf mb4">
      <div class="fl w-100 w-50-ns">
        <pre class="bg-light-gray pa3 bl bw3 b--green">
<code>import { HocModule, HocConfig } from 'ngx-warehouse';

const HOC_CONFIG: HocConfig = {
  showLoading: true //default is false
};

@NgModule({
  ...
  imports: [
    ...
    HocModule.configureHOC(HOC_CONFIG),
    ...
  ],
  ...
})</code></pre>
      </div>
      <div class="fl w-100 w-50-ns ph3 ph4-ns" style="height: 500px; overflow-y: scroll;">
        <hoc-demo-app>Loading demo...</hoc-demo-app>
      </div>
    </article>
  </main>

  <footer class="pv4 ph3 ph5-m ph6-l mid-gray">
    <small class="f6 db tc">Â© 2017 <b class="ttu">Phillip Curl</b></small>
    <div class="tc mt3">
      <a href="/language/" title="Language" class="f6 dib ph2 link mid-gray dim">Language</a>
      <a href="/terms/"    title="Terms" class="f6 dib ph2 link mid-gray dim">Terms of Use</a>
      <a href="/privacy/"  title="Privacy" class="f6 dib ph2 link mid-gray dim">Privacy</a>
    </div>
  </footer>

</body>

</html>
